; vim: set commentstring=;;%s:

(defwindow bar
  :monitor 0
  :stacking "fg"
  :exclusive true
  :geometry (geometry 
    :width "24"
    :height "100%"
    :anchor "left center")
  (centerbox :orientation "v"
    (topbar)
    (centerbar)
    (bottombar)
  )
)

(defwidget topbar []
  (box :orientation "v" :space-evenly false
    (launcher)
    (user)
    (player)
  )
)

(defwidget launcher []
  (button :onclick "fuzzel &" :class "button launcher" "")
)

(defwidget user []
  (box :orientation "v" :space-evenly false :class "button"
    (network)
    (volume)
    (brightness)
    (weather)
  )
)

;; TODO: waiting for https://github.com/elkowar/eww/pull/629 to use elvis & safe access operators
(deflisten network "scripts/network.sh")
(defwidget network []
  (button 
    :onclick "foot -e nmtui &" 
    :class {network == "" ? "network_down" : network.status} 
    {network == "" ? "󰋗" : network.symbol}
  )
)

(deflisten volume "scripts/volume.sh")
(defwidget volume []
  (eventbox
    :onscroll
    "if [[ {} == up ]]; 
      then pamixer --increase 5;
      else pamixer --decrease 5;
      fi;
      "
    :onclick "pamixer --toggle-mute"
    :onmiddleclick "pavucontrol &"

    (box :orientation "v" :space-evenly false 
      :class {volume == "" ? "volume_unmuted" : volume.mute}
      {volume == "" ? "󰋗" : volume.symbol}
      (label :class "small_text" :text "${volume == "" ? 100 : volume.volume}%")
    )
  )
)

(deflisten brightness "scripts/brightness.sh")
(defwidget brightness []
  (eventbox :class "brightness"
    :onscroll 
    "if [[ {} == up ]]; 
      then brightnessctl set 20%+;
      else brightnessctl set 20%-;
      fi;
      "
    {brightness == "" ? "󰋗" : brightness.symbol}
  )
)

(defpoll weather :interval "1h" "scripts/weather.sh")
(defwidget weather []
  (label :class "weather" :text {weather == "" ? "󰼯" : weather.symbol})
)

(deflisten playerctl "scripts/playerctl.sh")
(defwidget player []
  (box :orientation "v" :class "button playerctl"
    (button :onclick "playerctl previous" "󰙣")
    (button :onclick "playerctl play-pause" 
      {playerctl == "" ? "󰋗" : playerctl.symbol}
    )
    (button :onclick "playerctl next" "󰙡")
  )
)

(defwidget centerbar []
  (box :orientation "v" :space-evenly false
    (workspaces)
    ;; (open-window)
  )
)

(deflisten workspaces "scripts/workspaces.sh")
(defwidget workspaces []
  (box :orientation "v" :class "button"
    (for entry in { workspaces ?: "[]" }
      (button
        :onclick "hyprctl dispatch workspace ${entry.id}"

        :class "workspaces ${ 
          entry.id == entry.active ? "workspaces_active"
          : (entry.windows >= 1 ? "workspaces_used_${entry.id}" 
            : "workspaces_empty")
        }"

        { 
          entry.id == entry.active ? "󰮯" 
          : (entry.windows >= 1 ? "󰊠" 
            : "󰧞")
        }
      )
    )
  )
)

(defwidget bottombar []
  (box :orientation "v" :space-evenly false :valign "end"
    (tray)
    (system)
    (clock)
    (power_menu)
  )
)

(defwidget tray []
  (box :orientation "v" :class "button"
    (systray :pack-direction "down" :icon-size 18)
  )
)

(defwidget system []
  (box :orientation "v" :space-evenly false :class "button"
    (battery)
    (memory)
    (temperature)
    (cpu)
  )
)

(deflisten battery "scripts/battery.sh")
(defwidget battery []
  (box :orientation "v" :space-evenly false :class "battery" 
    :tooltip "${battery == "" ? 0 : battery.remaining} left @ ${battery == "" ? 0 : round(battery.wattage / 1000000, 0) }W"
    {battery == "" ? "󰂑" : battery.symbol}
    (box :orientation "v" :space-evenly false :class "small_text"
      :visible { battery == "" ? false : battery.state != "Full" && battery.state != "Not charging" }
      (label :text "${battery == "" ? 0 : battery.percentage}%")
    )
  )
)

(defpoll memory :interval "5s" "scripts/memory.sh")
(defwidget memory []
  (box :orientation "v" :space-evenly false :class "memory"
    "󰍛"
    (label :class "small_text" :text "${round(memory == "" ? 0 : memory.used_percentage, 0)}%")
  )
)

(defpoll temperature :interval "1m" "scripts/temperature.sh")
(defwidget temperature []
  (box :orientation "v" :space-evenly false :class "temperature"
    "󰔏"
    (label :class "small_text" :text "${temperature}°C")
  )
)

(defpoll cpu :interval "1m" "scripts/cpu.sh")
(defwidget cpu []
  (box :orientation "v" :space-evenly false :class "cpu"
    "󰘚"
    (label :class "small_text" 
      :text "${round(100 - (cpu == "" ? 99: cpu.cpu_percentage), 0)}%"
    )
  )
)

(defpoll time :interval "30s" "scripts/date.sh")
(defwidget clock []
  (box :orientation "v" :space-evenly false :class "button clock"
    {time == "" ? "00" : time.hour}
    {time == "" ? "00" : time.minute}
  )
)

;; TODO: Add actual power menu....
(defwidget power_menu []
  (box :class "button power_menu"
    "󰐥"
  )
)
