; vim: set commentstring=;;%s:

(defwindow bar
  :monitor 0
  :stacking "fg"
  :exclusive true
  :geometry (geometry 
    :width "24"
    :height "100%"
    :anchor "left center")
  (centerbox :orientation "v"
    (topbar)
    (centerbar)
    (bottombar)
  )
)

(defwidget topbar []
  (box :orientation "v" :space-evenly false
    (launcher)
    (user)
    (mpris)
  )
)

(defwidget launcher []
  (button :onclick "fuzzel &" :class "button launcher" "")
)

(defwidget user []
  (box :orientation "v" :space-evenly false :class "button"
    (network)
    (volume)
    (brightness)
    (weather)
  )
)

(deflisten network :initial "{}" "scripts/network.sh")
(defwidget network []
  ;; TODO: indicate vpn
  (button 
    :onclick "foot -e nmtui &" 
    :tooltip {network.ssid}
    :class {network.status} 
    {network.symbol}
  )
)

(deflisten volume :initial "{}" "scripts/volume.sh")
(defwidget volume []
  (eventbox
    :onscroll
    "if [[ {} == up ]]; 
      then pamixer --increase 5;
      else pamixer --decrease 5;
      fi;
      "
    :onclick "pamixer --toggle-mute"
    :onmiddleclick "pavucontrol &"

    ;;TODO: indicate currently used device (bt, speaker, ext speaker, jack)

    (box :orientation "v" :space-evenly false 
      :class {volume.mute}
      {volume.symbol}
      (label :class "small_text" :text "${volume.volume}%")
    )
  )
)

(deflisten brightness :initial "{}" "scripts/brightness.sh")
(defwidget brightness []
  (eventbox :class "brightness"
    :onscroll 
    "if [[ {} == up ]]; 
      then brightnessctl set 20%+;
      else brightnessctl set 20%-;
      fi;
      "
    {brightness.symbol}
  )
)

(defpoll weather :initial "{}" :interval "1h" "scripts/weather.sh")
(defwidget weather []
  (button
    :class "weather" 
    :tooltip {weather.tooltip}
    :onmiddleclick "xdg-open 'https://weather.com/weather/today/' &"
    {weather.symbol ?: "󰼯"}
  )
)

(deflisten mpris-status :initial "{}" "scripts/mpris.sh status")
(deflisten mpris-metadata :initial "{}" "scripts/mpris.sh metadata")
(defwidget mpris []
  (tooltip :class "button"
    "${mpris-metadata.title}\\n${mpris-metadata.artist} - ${mpris-metadata.album}"
    (box :orientation "v" :space-evenly false :class "button mpris"
      (button :onclick "playerctl previous" "󰙣")
      (button :onclick "playerctl play-pause" {mpris-status.symbol ?: "󰐌"})
      (button :onclick "playerctl next" "󰙡")
    )
  )
)

(defwidget centerbar []
  (box :orientation "v" :space-evenly false
    (workspaces)
    ;; (open-window)
  )
)

(deflisten workspaces :initial "[]" "scripts/workspaces.sh")
(defwidget workspaces []
  (box :orientation "v" :class "button"
    (for entry in { workspaces }
      (button
        :onclick "hyprctl dispatch workspace ${entry.id}"

        :class "workspaces ${ 
          entry.id == entry.active ? "workspaces_active"
          : (entry.windows >= 1 ? "workspaces_used_${entry.id}" 
            : "workspaces_empty")
        }"

        { 
          entry.id == entry.active ? "󰮯" 
          : (entry.windows >= 1 ? "󰊠" 
            : "󰧞")
        }
      )
    )
  )
)

(defwidget bottombar []
  (box :orientation "v" :space-evenly false :valign "end"
    (tray)
    (system)
    (clock)
    (power_menu)
  )
)

(defwidget tray []
  (box :orientation "v" :class "button"
    (systray :pack-direction "down" :icon-size 18)
  )
)

(defwidget system []
  (box :orientation "v" :space-evenly false :class "button"
    (battery)
    (memory)
    (temperature)
    (cpu)
  )
)

(deflisten battery :initial "{}" "scripts/battery.sh")
(defwidget battery []
  (box :orientation "v" :space-evenly false :class "battery" 
    :tooltip "${battery.remaining} left @ ${round((battery.wattage ?: 0) / 1000000, 1)}W"
    {battery.symbol}
    (box :orientation "v" :space-evenly false :class "small_text"
      :visible {battery.state != "Full" && battery.state != "Not charging"}
      (label :text "${battery.percentage}%")
    )
  )
)

(defpoll memory :initial "{}" :interval "10s" "scripts/memory.sh")
(defwidget memory []
  (box :orientation "v" :space-evenly false :class "memory"
    "󰍛"
    (label :class "small_text" :text "${round(memory.used_percentage ?: 0, 0)}%")
  )
)

(defpoll temperature :initial "" :interval "1m" "scripts/temperature.sh")
(defwidget temperature []
  (box :orientation "v" :space-evenly false :class "temperature"
    "󰔏"
    (label :class "small_text" :text "${temperature}°C")
  )
)

(defpoll cpu :initial "{}" :interval "1m" "scripts/cpu.sh")
(defwidget cpu []
  (box :orientation "v" :space-evenly false :class "cpu"
    "󰘚"
    (label :class "small_text" 
      :text "${round(100 - (cpu.cpu_percentage ?: 99), 0)}%"
    )
  )
)

(defpoll datetime :initial "{}" :interval "10s" "scripts/date.sh")
(defwidget clock []
  (box :orientation "v" :space-evenly false :class "button clock"
    :tooltip {datetime.full}
    {datetime.hour}
    {datetime.minute}
  )
)

;; TODO: add actual power menu....
(defwidget power_menu []
  (box :class "button power_menu"
    "󰐥"
  )
)
