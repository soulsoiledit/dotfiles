(defwindow bar
  :monitor 0
  :stacking "fg"
  :exclusive true
  :geometry (geometry 
    :width "100%"
    :height "5%"
    :anchor "center top")
  (box
    (box :space-evenly false :halign "start"
    (clock)
    (workspaces)
    )

    (box :space-evenly false :halign "end"
      (volume)
      (battery)
      (box (systray :class "layer systray" :icon-size 16))
    )
  )
)

(defpoll datetime :initial "{}" :interval "10s" "scripts/date.sh")
(defwidget clock []
  (box :class "layer clock"
    {datetime.full}
  )
)

(deflisten volume :initial "{}" "scripts/volume.sh")
(defwidget volume []
  (box :class "layer"
    (eventbox
      :class "layer hover volume ${volume.mute}"
      :onscroll
        "if [[ {} == up ]]; 
          then pamixer --increase 5;
          else pamixer --decrease 5;
        fi;
        "
      :onclick "pamixer --toggle-mute"
      :onmiddleclick "pavucontrol &"

      ;;TODO: indicate currently used device (bt, speaker, ext speaker, jack)
      "${volume.symbol} ${volume.volume}%"
    )
  )
)

(deflisten battery :initial "{}" "scripts/battery.sh")
(defwidget battery []
  (box :class "layer battery" 
    :tooltip "${battery.remaining} left @ ${round((battery.wattage ?: 0) / 1000000, 1)}W"
    "${battery.symbol}  ${battery.percentage}%"
  )
)

;; (defwidget launcher []
;;   (button :onclick "fuzzel &" :class "button launcher" "")
;; )
;;
;; (defwidget user []
;;   (box :space-evenly false :class "button"
;;     (network)
;;     ;; (brightness)
;;     ;; (weather)
;;   )
;; )
;;
;; (deflisten network :initial "{}" "scripts/network.sh")
;; (defwidget network []
;;   ;; TODO: indicate vpn
;;   (button 
;;     :onclick "foot -e nmtui &" 
;;     :tooltip {network.ssid}
;;     :class {network.status} 
;;     "${network.symbol} "
;;   )
;; )
;;
;;
;; (deflisten brightness :initial "{}" "scripts/brightness.sh")
;; (defwidget brightness []
;;   (eventbox :class "brightness"
;;     :onscroll 
;;     "if [[ {} == up ]]; 
;;       then brightnessctl set 20%+;
;;       else brightnessctl set 20%-;
;;       fi;
;;       "
;;     "${brightness.symbol} "
;;   )
;; )
;;
;; (defpoll weather :initial "{}" :interval "1h" "scripts/weather.sh")
;; (defwidget weather []
;;   (button
;;     :class "weather" 
;;     :tooltip {weather.tooltip}
;;     :onmiddleclick "xdg-open 'https://weather.com/weather/today/' &"
;;     "${weather.symbol ?: "󰼯"} "
;;   )
;; )
;;
;; (deflisten mpris-status :initial "{}" "scripts/mpris.sh status")
;; (deflisten mpris-metadata :initial "{}" "scripts/mpris.sh metadata")
;; (defwidget mpris []
;;   (tooltip :class "button"
;;     "${mpris-metadata.title}\\n${mpris-metadata.artist} - ${mpris-metadata.album}"
;;     (box :space-evenly false :class "mpris"
;;       (button :onclick "playerctl previous" "󰙣")
;;       (button :onclick "playerctl play-pause" {mpris-status.symbol ?: "󰐌"})
;;       (button :onclick "playerctl next" "󰙡")
;;     )
;;   )
;; )
;;

(deflisten workspace_list :initial "[1]" "scripts/workspaces.sh list")
(deflisten workspace_empty :initial "{}" "scripts/workspaces.sh empty")
(deflisten workspace_active :initial "{}" "scripts/workspaces.sh active")
(defwidget workspaces []
  (box :space-evenly false :class "layer workspaces"
    (for ws in workspace_list
      (button 
        :class { 
          ws == workspace_active?.id ?
            "active" :
            (workspace_empty?.[ws] ?: 0) >= 1 ?
              "used" :
              ""
        }
        :onclick "hyprctl dispatch workspace ${ws}"
      )
    )
  )
)

;; (defwidget system []
;;   (button :onmiddleclick "foot -e btop &"
;;     (box :space-evenly false :class "button"
;;       (battery)
;;       ;; (memory)
;;       ;; (temperature)
;;       ;; (cpu)
;;     )
;;   )
;; )
;;
;;
;; (defpoll memory :initial "{}" :interval "10s" "scripts/memory.sh")
;; (defwidget memory []
;;   (box :space-evenly false :class "memory"
;;     "󰍛 "
;;     (label :class "small_text" :text "${round(memory.used_percentage ?: 0, 0)}% ")
;;   )
;; )
;;
;; (defpoll temperature :initial "" :interval "1m" "scripts/temperature.sh")
;; (defwidget temperature []
;;   (box :space-evenly false :class "temperature"
;;     "󰔏 "
;;     (label :class "small_text" :text "${temperature}° ")
;;   )
;; )
;;
;; (defpoll cpu :initial "{}" :interval "1m" "scripts/cpu.sh")
;; (defwidget cpu []
;;   (box :space-evenly false :class "cpu"
;;     "󰘚 "
;;     (label :class "small_text" 
;;       :text "${round(100 - (cpu.cpu_percentage ?: 99), 0)}% "
;;     )
;;   )
;; )

;; TODO: add actual power menu....
;;
;; (defwidget power_menu []
;;   (button :onclick "fuzzel &" :class "button power" "󰐥")
;; )
