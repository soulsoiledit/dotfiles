(defwindow example
    :monitor 0
    :stacking "fg"
    :exclusive false
    :geometry (geometry :x "0px"
                        :y "-25px"
                        :width "99%"
                        :height "25"
                        :anchor "top center")
    (centerbox :space-evenly false
      (topbar)
      (box :halign "center" tray)
      (bottombar)
    )
)

(defwidget topbar []
    ;; (box :orientation "h" :space-evenly false
    ;;   (image :path "./macchiato_squircle.png" :image-width 50 )
    ;; )
    ;; launcher
    (box :orientation "h" :space-evenly false
      (clock)
      (network_widget)
      (volume_widget)
      (brightness_widget)
    )
)

(defwidget bottombar []
    (box :orientation "h" :space-evenly false :halign "end"
      (battery)
      (temper)
      (memory)
      (cpu)
    )
)

;; (defwidget clock-vert []
;;   (box :class "clock" :orientation "h" :space-evenly false
;;     (label :text "${time-month}")
;;     (label :text "${time-day}")
;;     (label :class "day" :text "${time-day-week}")
;;     (label :text "${time-hour}")
;;     (label :text "${time-min}")
;;   )
;; )

(defwidget clock []
  (box :class "clock" :orientation "h"
    (label :text "󰃭 ${time}")
  )
)

(defwidget brightness_widget []
  (eventbox
    :onscroll 
      `if [[ {} == up ]]; 
        then brightnessctl set 20%+;
        else brightnessctl set 20%-;
      fi;
      eww update brightness=$(./scripts/brightness.sh)
      `
    (box :orientation "h"
      (label :text "${brightness} ")
    )
  )
)

(defwidget battery []
  (box :class "battery" :orientation "h"
    (label :text "󰁹 ${bat} ")
  )
)

(defwidget temper []
  (box :class "temperature" :orientation "h"
    (label :text "󰔏 ${temp}°C ")
  )
)

(defwidget memory []
  (box :orientation "h"
    (label :text "󰍛 ${memory}% ")
  )
)

(defwidget cpu []
  (box :orientation "h"
    (label :text " ${round(EWW_CPU['avg'], 1)}% ")
  )
)

(defwidget network_widget []
  (button
    :class { network == "up" ? "net_up" : "net_down" }
    :onclick "alacritty -e nmtui &"
    (label :text { (network == "up") ? "󰖩 " : "󰖪 " })
  )
)

(defwidget volume_widget []
  (eventbox
    :onscroll 
      `if [[ {} == up ]]; 
        then pamixer -i 5;
        else pamixer -d 5;
      fi;
      eww update volume="$(./scripts/volume.sh)"
      `
    :onclick `pavucontrol &`
    :onmiddleclick `pamixer -t; eww update volume="$(./scripts/volume.sh)"`

    :tooltip `Muted = ${volume.mute}`
    :onhover `eww update volume="$(./scripts/volume.sh)"`

    (box :orientation "h" :space-evenly "false"
      :class { volume.mute == "true" ? "vol_muted" : "vol_active" }
      (label :text { volume.sink =~ 'bluez' ? "󰋋 " : "󰕾 " })
      (label :text "${volume.volume}% ")
    )
  )
)

(defpoll time :interval "1m" `date "+%a %m-%d %H:%M "`)
(defpoll bat :interval "1m" `./scripts/battery.sh`)
(defpoll temp :interval "1m" `acpi -t | grep -vP '20.0' | grep -oP '\\d+.0'`)
(defpoll network :interval "5s" `cat /sys/class/net/wlan0/operstate`)
(defpoll memory :interval "5s" `./scripts/memory.sh`)
(defpoll brightness :interval "1m" `./scripts/brightness.sh`)
(defpoll volume :interval "15s" `./scripts/volume.sh`)
(deflisten tray :initial "" "./scripts/tray.sh")
