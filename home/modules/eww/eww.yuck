(defwindow example
    :monitor 0
    :stacking "fg"
    :exclusive false
    :geometry (geometry :x "0px"
                        :y "-25px"
                        :width "100%"
                        :height "25"
                        :anchor "top center")
    (centerbox
      (topbar)
      (box :halign "center" tray)
      (bottombar)
    )
)

(defwidget topbar []
    ;; (box :orientation "h" :space-evenly false
    ;;   (image :path "./macchiato_squircle.png" :image-width 50 )
    ;; )
    ;; launcher
    (box :orientation "h" :space-evenly false
      (clock)
      (network_widget)
      (volume_widget)
      (brightness_widget)
      (label :text "| ")
      (workspace_widget)
    )
)

(defwidget bottombar []
    (box :orientation "h" :space-evenly false :halign "end"
      (battery)
      (temper)
      (memory)
    )
)

(defwidget clock []
  (box :class "clock" :orientation "h"
    (label :text "󰃭 ${time}")
  )
)

(defwidget brightness_widget []
  (eventbox
    :onscroll 
      `if [[ {} == up ]]; 
        then brightnessctl set 20%+;
        else brightnessctl set 20%-;
      fi;
      eww update brightness=$(./scripts/brightness.sh)
      `
    (box :orientation "h"
      :class "bright"
      (label :text "${brightness}")
    )
  )
)

(defwidget battery []
  (box :class "battery" :orientation "h"
    (label :text "󰁹 ${bat.percentage} ${bat.remaining}${bat.remaining == "" ? "" : " "}${round(bat.power / 1000000, 1)}W")
  )
)

(defwidget temper []
  (box :class "temperature" :orientation "h"
    (label :text "󰔏 ${temp}°C")
  )
)

(defwidget memory []
  (box :orientation "h" :class "memory"
    (label :text "󰍛 ${
      round(100 * (1 - memory.available / memory.total), 1)
    }%")
  )
)

(defwidget network_widget []
  (button
    :class { network == "up" ? "net_up" : "net_down" }
    :onclick "alacritty -e nmtui &"
    (label :text { (network == "up") ? "󰖩" : "󰖪" })
  )
)

(defwidget workspace_widget []
  (eventbox
    :class "workspace"
    (box
      (for entry in workspaces
        (button
          :class "workspaces"
          :onclick "hyprctl dispatch workspace ${entry.id}"
          (label :text { 
            entry.id == entry.active ? " " : (entry.windows >= 1 ? " " : " ")
          })
        )
      )
    )
  )
)

(defwidget volume_widget []
  (eventbox
    :onscroll 
      `if [[ {} == up ]]; 
        then pamixer --increase 5;
        else pamixer --decrease 5;
      fi;
      eww update volume="$(./scripts/volume.sh)"
      `
    :onclick `pamixer --toggle-mute; eww update volume="$(./scripts/volume.sh)"`
    :onmiddleclick `pavucontrol &`
    :onhover `eww update volume="$(./scripts/volume.sh)"`

    (box :orientation "h" :space-evenly "false"
      :class { volume.mute == "true" ? "vol_muted" : "vol_active" }
      (label :text { volume.sink =~ 'bluez' ? "󰋋 " : "󰕾 " })
      (label :text "${volume.volume}%")
    )
  )
)

(defpoll time :interval "1m" `date "+%a %m-%d %H:%M"`)
(defpoll bat :interval "1m" `./scripts/battery.sh`)
(defpoll temp :interval "1m" `acpi -t | grep -vP '20.0' | grep -oP '\\d+.0'`)
(defpoll network :interval "5s" `cat /sys/class/net/wlan0/operstate`)
(defpoll memory :interval "5s" `./scripts/memory.sh`)
(defpoll brightness :interval "1m" `./scripts/brightness.sh`)
(defpoll volume :interval "15s" `./scripts/volume.sh`)
(deflisten workspaces `./scripts/workspaces.sh`)
(deflisten tray :initial "" "./scripts/tray.sh")
